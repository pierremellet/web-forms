/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Condition } from './Condition';
import {
    ConditionFromJSON,
    ConditionFromJSONTyped,
    ConditionToJSON,
} from './Condition';

/**
 * 
 * @export
 * @interface ComplexRule
 */
export interface ComplexRule {
    /**
     * 
     * @type {string}
     * @memberof ComplexRule
     */
    type?: string;
    /**
     * 
     * @type {Array<Condition>}
     * @memberof ComplexRule
     */
    conditions?: Array<Condition>;
}

/**
 * Check if a given object implements the ComplexRule interface.
 */
export function instanceOfComplexRule(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ComplexRuleFromJSON(json: any): ComplexRule {
    return ComplexRuleFromJSONTyped(json, false);
}

export function ComplexRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplexRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(ConditionFromJSON)),
    };
}

export function ComplexRuleToJSON(value?: ComplexRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(ConditionToJSON)),
    };
}

