/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FormSection } from './FormSection';
import {
    FormSectionFromJSON,
    FormSectionFromJSONTyped,
    FormSectionToJSON,
} from './FormSection';
import type { I18NString } from './I18NString';
import {
    I18NStringFromJSON,
    I18NStringFromJSONTyped,
    I18NStringToJSON,
} from './I18NString';
import type { Router } from './Router';
import {
    RouterFromJSON,
    RouterFromJSONTyped,
    RouterToJSON,
} from './Router';

/**
 * 
 * @export
 * @interface FormConfig
 */
export interface FormConfig {
    /**
     * 
     * @type {string}
     * @memberof FormConfig
     */
    formId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FormConfig
     */
    authentication?: boolean;
    /**
     * 
     * @type {I18NString}
     * @memberof FormConfig
     */
    description: I18NString;
    /**
     * 
     * @type {I18NString}
     * @memberof FormConfig
     */
    name: I18NString;
    /**
     * 
     * @type {Array<FormSection>}
     * @memberof FormConfig
     */
    sections: Array<FormSection>;
    /**
     * 
     * @type {string}
     * @memberof FormConfig
     */
    accountId?: string;
    /**
     * 
     * @type {string}
     * @memberof FormConfig
     */
    createdDate?: string;
    /**
     * 
     * @type {string}
     * @memberof FormConfig
     */
    redirectURL?: string;
    /**
     * 
     * @type {Router}
     * @memberof FormConfig
     */
    router?: Router;
}

/**
 * Check if a given object implements the FormConfig interface.
 */
export function instanceOfFormConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "sections" in value;

    return isInstance;
}

export function FormConfigFromJSON(json: any): FormConfig {
    return FormConfigFromJSONTyped(json, false);
}

export function FormConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'formId': !exists(json, 'formId') ? undefined : json['formId'],
        'authentication': !exists(json, 'authentication') ? undefined : json['authentication'],
        'description': I18NStringFromJSON(json['description']),
        'name': I18NStringFromJSON(json['name']),
        'sections': ((json['sections'] as Array<any>).map(FormSectionFromJSON)),
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : json['createdDate'],
        'redirectURL': !exists(json, 'redirectURL') ? undefined : json['redirectURL'],
        'router': !exists(json, 'router') ? undefined : RouterFromJSON(json['router']),
    };
}

export function FormConfigToJSON(value?: FormConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'formId': value.formId,
        'authentication': value.authentication,
        'description': I18NStringToJSON(value.description),
        'name': I18NStringToJSON(value.name),
        'sections': ((value.sections as Array<any>).map(FormSectionToJSON)),
        'accountId': value.accountId,
        'createdDate': value.createdDate,
        'redirectURL': value.redirectURL,
        'router': RouterToJSON(value.router),
    };
}

