/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FormConfig,
} from '../models/index';
import {
    FormConfigFromJSON,
    FormConfigToJSON,
} from '../models/index';

export interface CreateOrUpdateFormRequest {
    formConfig?: FormConfig;
}

export interface GetFormConfigRequest {
    formId: string;
}

/**
 * 
 */
export class FormConfigsApiControllerApi extends runtime.BaseAPI {

    /**
     */
    async createOrUpdateFormRaw(requestParameters: CreateOrUpdateFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/formConfigs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormConfigToJSON(requestParameters.formConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormConfigFromJSON(jsonValue));
    }

    /**
     */
    async createOrUpdateForm(requestParameters: CreateOrUpdateFormRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormConfig> {
        const response = await this.createOrUpdateFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormConfigRaw(requestParameters: GetFormConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormConfig>> {
        if (requestParameters.formId === null || requestParameters.formId === undefined) {
            throw new runtime.RequiredError('formId','Required parameter requestParameters.formId was null or undefined when calling getFormConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/formConfigs/{formId}`.replace(`{${"formId"}}`, encodeURIComponent(String(requestParameters.formId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormConfigFromJSON(jsonValue));
    }

    /**
     */
    async getFormConfig(requestParameters: GetFormConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormConfig> {
        const response = await this.getFormConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listFormsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FormConfig>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/formConfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormConfigFromJSON));
    }

    /**
     */
    async listForms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FormConfig>> {
        const response = await this.listFormsRaw(initOverrides);
        return await response.value();
    }

}
