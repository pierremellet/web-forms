/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ff.server.api;

import ff.server.model.FormConfig;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-30T08:28:17.528094700+02:00[Europe/Paris]")
@Validated
public interface FormConfigsApi {

    default FormConfigsApiDelegate getDelegate() {
        return new FormConfigsApiDelegate() {};
    }

    /**
     * POST /formConfigs : Create or update a form
     *
     * @param formConfig Request Configuraiton (optional)
     * @return Requestion created (status code 201)
     */

    @RequestMapping(
        method = RequestMethod.POST,
        value = "/formConfigs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FormConfig> createOrUpdateForm( @Valid @RequestBody(required = false) FormConfig formConfig
    ) throws Exception {
        return getDelegate().createOrUpdateForm(formConfig);
    }


    /**
     * GET /formConfigs/{formId} : Get a form configuration by formId
     *
     * @param formId Numeric ID of the form config to get (required)
     * @return form configuration (status code 200)
     */

    @RequestMapping(
        method = RequestMethod.GET,
        value = "/formConfigs/{formId}",
        produces = { "application/json" }
    )
    default ResponseEntity<FormConfig> getFormConfig( @PathVariable("formId") String formId
    ) throws Exception {
        return getDelegate().getFormConfig(formId);
    }


    /**
     * GET /formConfigs : Get all form configuration instances
     *
     * @return List of form configs (status code 200)
     */

    @RequestMapping(
        method = RequestMethod.GET,
        value = "/formConfigs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FormConfig>> listForms(
        
    ) throws Exception {
        return getDelegate().listForms();
    }

}
